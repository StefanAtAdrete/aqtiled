/**
 * @file
 * Provides an Icon Picker for item lists.
 */

(function ($, Drupal) {

  'use strict';

  /**
   * Generate a custom dropdown based on unordered list and a select dropdown
   * with rendered icons.
   */
  Drupal.behaviors.iconsPicker = {

    attach: function (context, settings) {
      // Icon picker select element(s).
      const $iconPicker = $('.js-form-type-icon-select');

      // Go through all found icon picker select elements.
      $iconPicker.once('iconPicker').each(function () {
        // Set icon picker select element on $formItem.
        const $formItem = $(this);

        // Set default hide status on elements.
        $('select', $formItem).hide();
        const $dropdownList = $('.icons-picker > .item-list > ul', $formItem);

        $dropdownList.hide();

        // Set the selected list item and icon label.
        const $selectedListItem = $('li.selected', $dropdownList);
        var icon_label = $('li.icons-select__item', $dropdownList).first().html();

        // Change the icon label if selected list item is found.
        if ($selectedListItem.length > 0) {
          icon_label = $selectedListItem.first().html();
        }

        const $iconPickerSelected = $('.icons-picker--selected', $formItem);

        // Set the default selected item label.
        $iconPickerSelected.html(icon_label);

        // Add click event binding to the clickable list items (icons).
        $('li.icons-select__item', $dropdownList).on('click', {
          $dropdownList: $dropdownList,
          $formItem: $formItem,
          $iconPickerSelected: $iconPickerSelected
        }, Drupal.behaviors.iconsPicker.selectItem);

        // Collapse list when clicking on the selected label.
        $iconPickerSelected.click(function () {
          $(this).toggleClass('active');
          $dropdownList.toggle();
        });
      });
    },
    // Processed the click event on the list items.
    selectItem: function (e) {
      const $dropdownList = e.data.$dropdownList;
      const $formItem = e.data.$formItem;
      const $iconPickerSelected = e.data.$iconPickerSelected;
      const $listItem = $(this);

      // Remove the selected class of the previous selected item.
      $('li.selected', $dropdownList).removeClass('selected');

      // Add the selected class to the new selected item.
      $listItem.addClass('selected');

      // Get the icon id data attribute from the new selected item.
      const icon_id = $listItem.data('icon-id');

      // Set the form select element to the new value.
      $('select', $formItem).val(icon_id).change();

      // Get the new label and set it as selected in the list.
      const icon_label = $listItem.html();
      $iconPickerSelected.html(icon_label);

      // Toggle the list back to collapsed.
      $dropdownList.toggle();
    }
  };

})(jQuery, Drupal);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
(function ($, Drupal, window) {
  function TableResponsive(table) {
    this.table = table;
    this.$table = $(table);
    this.showText = Drupal.t('Show all columns');
    this.hideText = Drupal.t('Hide lower priority columns');
    this.$headers = this.$table.find('th');
    this.$link = $('<button type="button" class="link tableresponsive-toggle"></button>').attr('title', Drupal.t('Show table cells that were hidden to make the table fit within a small screen.')).on('click', $.proxy(this, 'eventhandlerToggleColumns'));
    this.$table.before($('<div class="tableresponsive-toggle-columns"></div>').append(this.$link));
    $(window).on('resize.tableresponsive', $.proxy(this, 'eventhandlerEvaluateColumnVisibility')).trigger('resize.tableresponsive');
  }
  Drupal.behaviors.tableResponsive = {
    attach: function attach(context, settings) {
      once('tableresponsive', 'table.responsive-enabled', context).forEach(function (table) {
        TableResponsive.tables.push(new TableResponsive(table));
      });
    }
  };
  $.extend(TableResponsive, {
    tables: []
  });
  $.extend(TableResponsive.prototype, {
    eventhandlerEvaluateColumnVisibility: function eventhandlerEvaluateColumnVisibility(e) {
      var pegged = parseInt(this.$link.data('pegged'), 10);
      var hiddenLength = this.$headers.filter('.priority-medium:hidden, .priority-low:hidden').length;
      if (hiddenLength > 0) {
        this.$link.show();
        this.$link[0].textContent = this.showText;
      }
      if (!pegged && hiddenLength === 0) {
        this.$link.hide();
        this.$link[0].textContent = this.hideText;
      }
    },
    eventhandlerToggleColumns: function eventhandlerToggleColumns(e) {
      e.preventDefault();
      var self = this;
      var $hiddenHeaders = this.$headers.filter('.priority-medium:hidden, .priority-low:hidden');
      this.$revealedCells = this.$revealedCells || $();
      if ($hiddenHeaders.length > 0) {
        $hiddenHeaders.each(function (index, element) {
          var $header = $(this);
          var position = $header.prevAll('th').length;
          self.$table.find('tbody tr').each(function () {
            var $cells = $(this).find('td').eq(position);
            $cells.show();
            self.$revealedCells = $().add(self.$revealedCells).add($cells);
          });
          $header.show();
          self.$revealedCells = $().add(self.$revealedCells).add($header);
        });
        this.$link[0].textContent = this.hideText;
        this.$link.data('pegged', 1);
      } else {
        this.$revealedCells.hide();
        this.$revealedCells.each(function (index, element) {
          var $cell = $(this);
          var properties = $cell.attr('style').split(';');
          var newProps = [];
          var match = /^display\s*:\s*none$/;
          for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            prop.trim();
            var isDisplayNone = match.exec(prop);
            if (isDisplayNone) {
              continue;
            }
            newProps.push(prop);
          }
          $cell.attr('style', newProps.join(';'));
        });
        this.$link[0].textContent = this.showText;
        this.$link.data('pegged', 0);
        $(window).trigger('resize.tableresponsive');
      }
    }
  });
  Drupal.TableResponsive = TableResponsive;
})(jQuery, Drupal, window);;
